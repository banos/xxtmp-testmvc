// Generated by CoffeeScript 1.10.0
(function() {
  var TobuyApp,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TobuyApp = (function(superClass) {
    var ENTER_KEY;

    extend(TobuyApp, superClass);

    ENTER_KEY = 13;

    TobuyApp.prototype.elements = {
      '#new-tobuy': 'newTobuyInput',
      '#toggle-all': 'toggleAllElem',
      '#main': 'main',
      '#tobuy-list': 'tobuys',
      '#footer': 'footer',
      '#tobuy-count': 'count',
      '#filters a': 'filters',
      '#clear-completed': 'clearCompleted'
    };

    TobuyApp.prototype.events = {
      'keyup #new-tobuy': 'new',
      'click #toggle-all': 'toggleAll',
      'click #clear-completed': 'clearCompletedItem'
    };

    function TobuyApp() {
      this.renderFooter = bind(this.renderFooter, this);
      this.toggleElems = bind(this.toggleElems, this);
      this.addAll = bind(this.addAll, this);
      this.addNew = bind(this.addNew, this);
      TobuyApp.__super__.constructor.apply(this, arguments);
      Tobuy.bind('create', this.addNew);
      Tobuy.bind('refresh change', this.addAll);
      Tobuy.bind('refresh change', this.toggleElems);
      Tobuy.bind('refresh change', this.renderFooter);
      Tobuy.fetch();
      this.routes({
        '/:filter': function(param) {
          this.filter = param.filter;

          /*
          				TOBUY: Need to figure out why the route doesn't trigger `change` event
           */
          Tobuy.trigger('refresh');
          return this.filters.removeClass('selected').filter("[href='#/" + this.filter + "']").addClass('selected');
        }
      });
    }

    TobuyApp.prototype["new"] = function(e) {
      var val;
      val = $.trim(this.newTobuyInput.val());
      if (e.which === ENTER_KEY && val) {
        Tobuy.create({
          title: val
        });
        return this.newTobuyInput.val('');
      }
    };

    TobuyApp.prototype.getByFilter = function() {
      switch (this.filter) {
        case 'active':
          return Tobuy.active();
        case 'completed':
          return Tobuy.completed();
        default:
          return Tobuy.all();
      }
    };

    TobuyApp.prototype.addNew = function(tobuy) {
      var view;
      view = new Tobuys({
        tobuy: tobuy
      });
      return this.tobuys.append(view.render().el);
    };

    TobuyApp.prototype.addAll = function() {
      var i, len, ref, results, tobuy;
      this.tobuys.empty();
      ref = this.getByFilter();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        tobuy = ref[i];
        results.push(this.addNew(tobuy));
      }
      return results;
    };

    TobuyApp.prototype.toggleAll = function(e) {
      var checked;
      checked = e.target.checked;
      return Tobuy.each(function(tobuy) {

        /*
        			TOBUY: Model updateAttribute sometimes won't stick:
        				https://github.com/maccman/spine/issues/219
         */
        tobuy.updateAttribute('completed', checked);
        return tobuy.trigger('update', tobuy);
      });
    };

    TobuyApp.prototype.clearCompletedItem = function() {
      return Tobuy.destroyCompleted();
    };

    TobuyApp.prototype.toggleElems = function() {
      var completed, total;
      completed = Tobuy.completed().length;
      total = Tobuy.count();
      this.main.toggle(total !== 0);
      this.footer.toggle(total !== 0);
      this.toggleAllElem.prop('checked', completed === total);
      return this.clearCompleted.toggle(completed !== 0);
    };

    TobuyApp.prototype.renderFooter = function() {
      var active, completed, text;
      text = function(count) {
        if (count === 1) {
          return 'item';
        } else {
          return 'items';
        }
      };
      active = Tobuy.active().length;
      completed = Tobuy.completed().length;
      return this.count.html("<strong>" + active + "</strong> " + (text(active)) + " left");
    };

    return TobuyApp;

  })(Spine.Controller);

  $(function() {
    new TobuyApp({
      el: $('#tobuyapp')
    });
    return Spine.Route.setup();
  });

}).call(this);
